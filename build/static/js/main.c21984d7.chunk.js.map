{"version":3,"sources":["components/KanbanBoard/Column/Cell/index.js","components/KanbanBoard/Column/index.js","components/KanbanBoard/index.js","App.js","serviceWorker.js","index.js"],"names":["Cell","cellData","className","title","first_publish_year","edition_count","Column","columnData","sort","a","b","style","backgroundColor","Math","floor","random","toString","last_publish_year","map","value","key","KanbanBoard","data","publishYears","i","length","push","uniquePublishYears","Set","author_name","App","useState","hasError","setErrors","isLoading","setIsLoading","dataShrunk","setDataShrunk","API_URL","AUTHOR_ID","apiData","setApiData","necessaryData","setNecessaryData","console","log","fetch","json","then","res","handleData","catch","err","docs","useEffect","shrunkData","language","includes","validEntry","authors_str","z","all_publish_years","publish_date","element","parseInt","match","concat","publish_year","max","shrinkData","fetchData","type","color","height","width","JSON","stringify","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c21984d7.chunk.js","sourcesContent":["import React from 'react';\nimport './styles.scss';\n\nconst Cell = ({ cellData }) => {\n  return (\n    <div className=\"cell-container\">\n      <div className=\"vert\">\n        <div className=\"title\">{cellData.title}</div>\n      </div>\n      <div className=\"vert\">\n        <div className=\"light-text\">\n          First Published: {cellData.first_publish_year}\n        </div>\n        <div className=\"light-text\">Editions: {cellData.edition_count}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Cell;\n","import React from 'react';\nimport './styles.scss';\nimport Cell from './Cell';\n\nconst Column = ({ columnData }) => {\n  const getRandomColor = () => {\n    return (\n      '#' + Math.floor((0.2 + Math.random() * 0.6) * 16777215).toString(16)\n    );\n  };\n  columnData.sort((a, b) => a.first_publish_year - b.first_publish_year);\n  return (\n    <div className=\"column-container\">\n      <div className=\"top-bar\" style={{ backgroundColor: getRandomColor() }} />\n      <div className=\"title\">{columnData[0].last_publish_year}</div>\n      <div className=\"cells-container\">\n        {columnData.map(value => {\n          return <Cell key={value.key} cellData={value} />;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Column;\n","import React from 'react';\nimport './styles.scss';\nimport Column from './Column';\n\nconst KanbanBoard = ({ data }) => {\n  let publishYears = [];\n  for (let i = 0; i < data.length; i++) {\n    publishYears.push(data[i].last_publish_year);\n  }\n  let uniquePublishYears = [...new Set(publishYears)];\n  uniquePublishYears.sort((a, b) => a - b);\n\n  return (\n    <div className=\"board-container\">\n      <div className=\"title\">{data[0].author_name}</div>\n      <div className=\"columns-container\">\n        {uniquePublishYears.map(value => {\n          let columnData = [];\n          for (let i = 0; i < data.length; i++) {\n            if (data[i].last_publish_year === value) {\n              columnData.push(data[i]);\n            }\n          }\n          return <Column key={value} columnData={columnData} />;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default KanbanBoard;\n","import React, { useState, useEffect } from 'react';\nimport Loader from 'react-loader-spinner';\nimport KanbanBoard from './components/KanbanBoard';\nimport './App.scss';\n\nconst App = () => {\n  const [hasError, setErrors] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [dataShrunk, setDataShrunk] = useState(false);\n  const API_URL = 'http://openlibrary.org/search.json?author=';\n  const AUTHOR_ID = 'OL26320A';\n  const LOADER_COLOR = '#FBC901';\n  const [apiData, setApiData] = useState();\n  const [necessaryData, setNecessaryData] = useState();\n\n  async function fetchData() {\n    console.log(\n      'Fetching data from : ' + API_URL + AUTHOR_ID + 'lang=eng&limit=1000'\n    );\n    const res = await fetch(API_URL + AUTHOR_ID + 'lang=eng&limit=1000');\n    res\n      .json()\n      .then(res => handleData(res))\n      .catch(err => setErrors(err));\n  }\n\n  const handleData = res => {\n    console.log('Received Data.', res);\n    setApiData(res.docs);\n  };\n\n  const shrinkData = () => {\n    // Here we'll narrow down our data to what we need.\n    let shrunkData = [];\n    for (let i = 0; i < apiData.length; i++) {\n      // Here we check if the book was published in English and if it is, we'll put it in our necessaryData array.\n      if (apiData[i].language && apiData[i].language.includes('eng')) {\n        let validEntry = {};\n\n        // author_name field returns an array and might have additional writers.\n        // Here we create a string that includes all contributing writers and seperates them with \"&\" sign.\n        let authors_str = '';\n        for (let z = 0; z < apiData[i].author_name.length; z++) {\n          authors_str += apiData[i].author_name[z];\n          if (z !== apiData[i].author_name.length - 1) {\n            authors_str += ' & ';\n          }\n        }\n\n        // We use our authors_str in our necessaryData array's author_name field.\n        validEntry['author_name'] = authors_str;\n        validEntry['title'] = apiData[i].title;\n        validEntry['first_publish_year'] = apiData[i].first_publish_year;\n        validEntry['edition_count'] = apiData[i].edition_count;\n        validEntry['key'] = i;\n\n        // The API returns two fields for publish information, as publish_year which is an array consisting of integer values for years\n        // and as publish_date which is an array that returns strings with unstable date formatting.\n        // Here we'll check the latest publish year by checking for both arrays and keeping the highest year we found.\n        let all_publish_years = [];\n        // Here we look for 4 repeating digits in each element in the publish_date array provided from our API and parse our results to int.\n        // With this we create and array that takes every publish year as int from the publish_date array which stores it's elements as strings.\n        if (apiData[i].publish_date) {\n          all_publish_years = apiData[i].publish_date.map(element =>\n            parseInt(element.match(/\\d{4}/)[0])\n          );\n        }\n        // Here we combine the publish years we get from the publish_date array with publish_year array from the API that has integer elements already.\n        all_publish_years = all_publish_years.concat(apiData[i].publish_year);\n        // After combining every publish year we got, we find the highest one in our combined array and set it as last_publish_year.\n        if (Math.max(...all_publish_years)) {\n          validEntry['last_publish_year'] = Math.max(...all_publish_years);\n          // Once we assign every value we need for this project, we push the entry into our necessaryData array.\n          shrunkData.push(validEntry);\n        }\n      }\n    }\n    setNecessaryData(shrunkData);\n    console.log('Valid Entry Count : ', shrunkData.length);\n    setDataShrunk(true);\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    if (!apiData) {\n      fetchData();\n    } else if (!dataShrunk) {\n      shrinkData();\n    }\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"App-loading\">\n        <header className=\"Loading-header\">\n          <Loader\n            type=\"BallTriangle\"\n            color={LOADER_COLOR}\n            height={100}\n            width={100}\n          />\n        </header>\n      </div>\n    );\n  }\n  if (hasError) {\n    return (\n      <div className=\"App-error\">\n        <header className=\"App-header\">\n          <p>Something went wrong and I swear it's not my fault!</p>\n          <p>Here's all I know:</p>\n          <p>{JSON.stringify(hasError)}</p>\n        </header>\n      </div>\n    );\n  }\n  if (dataShrunk) {\n    return (\n      <div className=\"App\">\n        <KanbanBoard data={necessaryData} />\n      </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}